import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import {
  PlusIcon,
  BuildingOfficeIcon,
  WrenchScrewdriverIcon,
  DocumentTextIcon,
  BoltIcon,
  FireIcon,
  ArrowDownTrayIcon,
  CogIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
import jsPDF from 'jspdf';

const QuickActions = ({ dashboardData, onReportGenerate }) => {
  const [showQuickActions, setShowQuickActions] = useState(false);
  const [showReportModal, setShowReportModal] = useState(false);
  const [reportPeriod, setReportPeriod] = useState('monthly');
  const [generatingReport, setGeneratingReport] = useState(false);
  const quickActionsRef = useRef(null);

  // Close quick actions when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (quickActionsRef.current && !quickActionsRef.current.contains(event.target)) {
        setShowQuickActions(false);
      }
    };

    if (showQuickActions) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showQuickActions]);

  const generateReport = async () => {
    setGeneratingReport(true);
    try {
      const doc = new jsPDF();
      
      // Header
      doc.setFontSize(20);
      doc.text('Rynix FM Management Report', 20, 30);
      
      doc.setFontSize(12);
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 45);
      doc.text(`Period: ${reportPeriod.charAt(0).toUpperCase() + reportPeriod.slice(1)}`, 20, 55);
      
      // Dashboard Summary
      doc.setFontSize(16);
      doc.text('Dashboard Summary', 20, 75);
      
      doc.setFontSize(12);
      let yPos = 90;
      
      if (dashboardData) {
        doc.text(`Total Facilities: ${dashboardData.facilities || 0}`, 20, yPos);
        yPos += 10;
        doc.text(`Active Maintenance Requests: ${dashboardData.maintenance || 0}`, 20, yPos);
        yPos += 10;
        doc.text(`Pending Tasks: ${dashboardData.tasks || 0}`, 20, yPos);
        yPos += 10;
        doc.text(`Electric Meters: ${dashboardData.meters || 0}`, 20, yPos);
        yPos += 10;
        doc.text(`Heating Systems: ${dashboardData.heating || 0}`, 20, yPos);
      }
      
      // Performance Metrics
      doc.setFontSize(16);
      doc.text('Performance Metrics', 20, yPos + 20);
      
      doc.setFontSize(12);
      yPos += 35;
      doc.text('• Energy consumption monitoring active', 20, yPos);
      yPos += 10;
      doc.text('• Gas-heating correlation: 75% efficiency', 20, yPos);
      yPos += 10;
      doc.text('• Database optimizations applied', 20, yPos);
      yPos += 10;
      doc.text('• Real-time dashboard updates enabled', 20, yPos);
      
      // Footer
      doc.setFontSize(10);
      doc.text('Generated by Rynix FM Management v1.1', 20, 280);
      
      doc.save(`rynix-fm-report-${reportPeriod}-${new Date().toISOString().split('T')[0]}.pdf`);
      
      if (onReportGenerate) {
        onReportGenerate(reportPeriod);
      }
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setGeneratingReport(false);
      setShowReportModal(false);
    }
  };

  const quickActionItems = [
    {
      name: 'Add Facility',
      description: 'Create new facility',
      icon: BuildingOfficeIcon,
      color: 'bg-blue-500',
      link: '/facilities',
      action: null
    },
    {
      name: 'New Maintenance',
      description: 'Log maintenance request',
      icon: WrenchScrewdriverIcon,
      color: 'bg-yellow-500',
      link: '/maintenance',
      action: null
    },
    {
      name: 'Create Task',
      description: 'Add new task',
      icon: DocumentTextIcon,
      color: 'bg-green-500',
      link: '/tasks',
      action: null
    },
    {
      name: 'Add Meter',
      description: 'Register new meter',
      icon: BoltIcon,
      color: 'bg-purple-500',
      link: '/meters',
      action: null
    },
    {
      name: 'Heating System',
      description: 'Add heating system',
      icon: FireIcon,
      color: 'bg-red-500',
      link: '/apartments',
      action: null
    },
    {
      name: 'Generate Report',
      description: 'Export system report',
      icon: ArrowDownTrayIcon,
      color: 'bg-indigo-500',
      link: null,
      action: () => setShowReportModal(true)
    }
  ];

  return (
    <>
      {/* Quick Actions Button */}
      <div className="relative" ref={quickActionsRef}>
        <button
          onClick={() => setShowQuickActions(!showQuickActions)}
          className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors duration-200 shadow-sm"
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          Quick Actions
        </button>

        {/* Quick Actions Dropdown */}
        {showQuickActions && (
          <div className="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 z-50">
            <div className="p-4">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Quick Actions
              </h3>
              <div className="grid grid-cols-2 gap-3">
                {quickActionItems.map((item, index) => {
                  const IconComponent = item.icon;
                  const content = (
                    <div className="flex flex-col items-center p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 cursor-pointer group">
                      <div className={`p-2 ${item.color} rounded-lg mb-2 group-hover:scale-110 transition-transform duration-200`}>
                        <IconComponent className="h-5 w-5 text-white" />
                      </div>
                      <span className="text-sm font-medium text-gray-900 dark:text-white text-center">
                        {item.name}
                      </span>
                      <span className="text-xs text-gray-500 dark:text-gray-400 text-center mt-1">
                        {item.description}
                      </span>
                    </div>
                  );

                  if (item.link) {
                    return (
                      <Link
                        key={index}
                        to={item.link}
                        onClick={() => setShowQuickActions(false)}
                      >
                        {content}
                      </Link>
                    );
                  } else if (item.action) {
                    return (
                      <div
                        key={index}
                        onClick={() => {
                          item.action();
                          setShowQuickActions(false);
                        }}
                      >
                        {content}
                      </div>
                    );
                  }
                  return content;
                })}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Report Generation Modal */}
      {showReportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-xl p-6 w-full max-w-md mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Generate Report
              </h3>
              <button
                onClick={() => setShowReportModal(false)}
                className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                <XMarkIcon className="h-6 w-6" />
              </button>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Report Period
              </label>
              <select
                value={reportPeriod}
                onChange={(e) => setReportPeriod(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
              >
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
              </select>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setShowReportModal(false)}
                className="flex-1 px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={generateReport}
                disabled={generatingReport}
                className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg transition-colors flex items-center justify-center"
              >
                {generatingReport ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Generating...
                  </>
                ) : (
                  <>
                    <ArrowDownTrayIcon className="h-4 w-4 mr-2" />
                    Generate PDF
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default QuickActions;